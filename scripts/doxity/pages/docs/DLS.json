{"fileName":"/contracts/DLS.sol","name":"DLS","abi":[{"constant":false,"inputs":[{"name":"pubKey","type":"address"}],"name":"deregisterPublisher","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"hashes","type":"bytes"}],"name":"addSellers","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"hash","type":"bytes32"}],"name":"addSeller","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"","type":"bytes32"}],"name":"publishers","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"pubKey","type":"address"},{"name":"sellerDomain","type":"string"},{"name":"sellerId","type":"string"},{"name":"sellerRel","type":"uint8"}],"name":"isSellerForPublisher","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"domain","type":"bytes32"}],"name":"isRegisteredPublisherDomain","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"owner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"pubKey","type":"address"}],"name":"isRegisteredPublisher","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"bytes32"},{"name":"","type":"bytes32"}],"name":"sellers","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"newOwner","type":"address"}],"name":"changeOwner","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"publisherDomain","type":"string"}],"name":"getPublisherFromDomain","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"domains","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"domain","type":"bytes32"},{"name":"pubKey","type":"address"}],"name":"registerPublisher","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"hash","type":"bytes32"}],"name":"removeSeller","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"inputs":[],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"name":"publisherDomain","type":"bytes32"},{"indexed":true,"name":"publisherKey","type":"address"}],"name":"_PublisherRegistered","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"publisherDomain","type":"bytes32"},{"indexed":true,"name":"publisherKey","type":"address"}],"name":"_PublisherDeregistered","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"publisherDomain","type":"bytes32"},{"indexed":true,"name":"sellerHash","type":"bytes32"}],"name":"_SellerAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"publisherDomain","type":"bytes32"},{"indexed":true,"name":"sellerHash","type":"bytes32"}],"name":"_SellerRemoved","type":"event"}],"source":"pragma solidity ^0.4.4;\n\n\ncontract DLS {\n  /*\n   * The various types of relationships\n   * (can be extended along with ads.txt spec)\n   */\n  enum Relationship {\n    Null,\n    Direct,\n    Reseller\n  }\n\n  /**\n   * @notice a mapping of domains to publisher public keys\n   *\n   * @example\n   * \"nytimes.com\" -> \"0x123...abc\"\n   */\n  mapping (bytes32 => address) public publishers;\n\n  /**\n   * @notice a mapping of publisher public keys to domains\n   *\n   * @example\n   * \"0x123...abc\" -> \"nytimes.com\"\n   */\n  mapping (address => bytes32) public domains;\n\n   /**\n    * @notice a mapping of publsher domains to\n    * their hashes of authorized sellers\n    *\n    * @example example\n    * sellers[sha3(domain)][sellerHash] -> sellerHash\n    */\n  mapping (bytes32 => mapping (bytes32 => bytes32)) public sellers;\n\n  /**\n   * @notice The owner of this contract.\n   */\n  address public owner;\n\n  /**\n   * Events, when triggered, record logs in the blockchain.\n   * Clients can listen on specific events to fetch data.\n   */\n  event _PublisherRegistered(bytes32 indexed publisherDomain, address indexed publisherKey);\n  event _PublisherDeregistered(bytes32 indexed publisherDomain, address indexed publisherKey);\n  event _SellerAdded(bytes32 indexed publisherDomain, bytes32 indexed sellerHash);\n  event _SellerRemoved(bytes32 indexed publisherDomain, bytes32 indexed sellerHash);\n\n  /**\n   * @notice modifier which limits execution\n   * of the function to the owner.\n   */\n  modifier onlyOwner () {\n    if (msg.sender != owner) {\n      revert();\n    }\n\n    // continue with code execution\n    _;\n  }\n\n  /*\n   * @notice The constructor function,\n   * called only once when this contract is initially deployed.\n   */\n  function DLS() {\n    owner = msg.sender;\n  }\n\n  /**\n   * @notice Change owner of contract.\n   * @param newOwner new owner address\n   */\n  function changeOwner(address newOwner) onlyOwner external {\n    owner = newOwner;\n  }\n\n  /**\n   * @notice Register new publisher.\n   * Only the owner of the contract can register new publishers.\n   * Publisher public key must not already exist in order to\n   * be added or modified.\n   * @param domain pubisher domain\n   * @param pubKey pubisher public key\n   */\n  function registerPublisher(bytes32 domain, address pubKey) onlyOwner external {\n    require(domains[pubKey] == 0);\n    publishers[sha3(domain)] = pubKey;\n    domains[pubKey] = domain;\n    _PublisherRegistered(domain, pubKey);\n  }\n\n  /**\n   * @notice Deregister existing publisher.\n   * Only contract owner is allowed to deregister.\n   * @param pubKey pubisher public key\n   */\n  function deregisterPublisher(address pubKey) onlyOwner external {\n    require(publishers[sha3(domains[pubKey])] != address(0));\n    // order matters here, delete pub from map first.\n    delete publishers[sha3(domains[pubKey])];\n    delete domains[pubKey];\n    _PublisherDeregistered(domains[pubKey], pubKey);\n  }\n\n  /**\n   * @notice Allow publisher to add a seller by the hash of the seller information.\n   * @param hash sha3 hash of seller information\n   */\n  function addSeller(bytes32 hash) public {\n    // Check that this ethereum address is a registered publisher.\n    require(domains[msg.sender] != 0);\n    sellers[sha3(domains[msg.sender])][hash] = hash;\n    _SellerAdded(domains[msg.sender], hash);\n  }\n\n  /**\n   * @notice Allow publisher to add multiple sellers by providing a string of concatenated hashes of the seller information.\n   * @param hashes string consisting of concatenated hashes of seller information\n   */\n  function addSellers(bytes hashes) external {\n    // Check that this ethereum address is a registered publisher.\n    require(domains[msg.sender] != 0);\n\n    // count how many seller hashes there are\n    uint256 count = (hashes.length / 32);\n    uint256 offset = 32;\n\n    bytes memory h = hashes;\n\n    for (uint256 i = 0; i < count; i++) {\n      bytes32 hash;\n\n      assembly {\n         // read last 32 bytes up to offset and load it to variable\n         hash := mload(add(h, offset))\n      }\n\n      // increment offset by the byte size of hash\n      offset += 32;\n\n      addSeller(hash);\n    }\n  }\n\n  /**\n   * @notice Remove seller from publisher\n   * @param hash sha3 hash of seller information\n   */\n  function removeSeller(bytes32 hash) external {\n    // Check that this ethereum address is a registered publisher.\n    require(domains[msg.sender] != 0);\n    delete sellers[sha3(domains[msg.sender])][hash];\n    _SellerRemoved(domains[msg.sender], hash);\n  }\n\n  /**\n    * @notice Get publisher public key from domain name\n    * @param publisherDomain domain of publisher\n    * @return publisher public key\n    */\n  function getPublisherFromDomain(string publisherDomain) public constant returns (address) {\n    return publishers[sha3(publisherDomain)];\n  }\n\n  /**\n   * @notice Check if publisher is registered.\n   * @param pubKey pubisher public key\n   * @return bool\n   */\n  function isRegisteredPublisher(address pubKey) external constant returns (bool) {\n    return (domains[pubKey] != \"\");\n  }\n\n  /**\n   * @notice Check if publisher is registered by domain\n   * @param domain pubisher domain\n   * @return bool\n   */\n  function isRegisteredPublisherDomain(bytes32 domain) external constant returns (bool) {\n    return (publishers[sha3(domain)] != address(0));\n  }\n\n  /**\n   * @notice Return true if is seller for publisher\n   * @param pubKey publisher public key\n   * @param sellerDomain domain of seller\n   * @param sellerId ID of seller\n   * @param sellerRel Relationship of seller. (Direct: 0, Reseller: 1)\n   * @return boolean\n   */\n  function isSellerForPublisher(\n    address pubKey,\n    string sellerDomain,\n    string sellerId,\n    Relationship sellerRel\n  )\n  external\n  constant\n  returns (bool) {\n    bytes32 hash = sha3(sellerDomain, sellerId, sellerRel);\n    return (sellers[sha3(domains[pubKey])][hash] != \"\");\n  }\n}\n","abiDocs":[{"constant":false,"inputs":[{"name":"pubKey","type":"address","description":"pubisher public key"}],"name":"deregisterPublisher","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","notice":"Deregister existing publisher. Only contract owner is allowed to deregister.","signature":"deregisterPublisher(address)","signatureHash":"12d41194"},{"constant":false,"inputs":[{"name":"hashes","type":"bytes","description":"string consisting of concatenated hashes of seller information"}],"name":"addSellers","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","notice":"Allow publisher to add multiple sellers by providing a string of concatenated hashes of the seller information.","signature":"addSellers(bytes)","signatureHash":"1e78f12a"},{"constant":false,"inputs":[{"name":"hash","type":"bytes32","description":"sha3 hash of seller information"}],"name":"addSeller","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","notice":"Allow publisher to add a seller by the hash of the seller information.","signature":"addSeller(bytes32)","signatureHash":"2aab8cae"},{"constant":true,"inputs":[{"name":"","type":"bytes32"}],"name":"publishers","payable":false,"stateMutability":"view","type":"function","signature":"publishers(bytes32)","signatureHash":"410d4fdd"},{"constant":true,"inputs":[{"name":"pubKey","type":"address","description":"publisher public key"},{"name":"sellerDomain","type":"string","description":"domain of seller"},{"name":"sellerId","type":"string","description":"ID of seller"},{"name":"sellerRel","type":"uint8","description":"Relationship of seller. (Direct: 0, Reseller: 1)"}],"name":"isSellerForPublisher","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function","return":"boolean","notice":"Return true if is seller for publisher","signature":"isSellerForPublisher(address,string,string,uint8)","signatureHash":"4e7fabbf"},{"constant":true,"inputs":[{"name":"domain","type":"bytes32","description":"pubisher domain"}],"name":"isRegisteredPublisherDomain","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function","return":"bool","notice":"Check if publisher is registered by domain","signature":"isRegisteredPublisherDomain(bytes32)","signatureHash":"61e2d43d"},{"constant":true,"inputs":[],"name":"owner","payable":false,"stateMutability":"view","type":"function","signature":"owner()","signatureHash":"8da5cb5b"},{"constant":true,"inputs":[{"name":"pubKey","type":"address","description":"pubisher public key"}],"name":"isRegisteredPublisher","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function","return":"bool","notice":"Check if publisher is registered.","signature":"isRegisteredPublisher(address)","signatureHash":"9fb91410"},{"constant":true,"inputs":[{"name":"","type":"bytes32"},{"name":"","type":"bytes32"}],"name":"sellers","payable":false,"stateMutability":"view","type":"function","signature":"sellers(bytes32,bytes32)","signatureHash":"a08508fd"},{"constant":false,"inputs":[{"name":"newOwner","type":"address","description":"new owner address"}],"name":"changeOwner","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","notice":"Change owner of contract.","signature":"changeOwner(address)","signatureHash":"a6f9dae1"},{"constant":true,"inputs":[{"name":"publisherDomain","type":"string","description":"domain of publisher"}],"name":"getPublisherFromDomain","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function","return":"publisher public key","notice":"Get publisher public key from domain name","signature":"getPublisherFromDomain(string)","signatureHash":"e267c06e"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"domains","payable":false,"stateMutability":"view","type":"function","signature":"domains(address)","signatureHash":"e2ffea6e"},{"constant":false,"inputs":[{"name":"domain","type":"bytes32","description":"pubisher domain"},{"name":"pubKey","type":"address","description":"pubisher public key"}],"name":"registerPublisher","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","notice":"Register new publisher. Only the owner of the contract can register new publishers. Publisher public key must not already exist in order to be added or modified.","signature":"registerPublisher(bytes32,address)","signatureHash":"ee83fba2"},{"constant":false,"inputs":[{"name":"hash","type":"bytes32","description":"sha3 hash of seller information"}],"name":"removeSeller","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","notice":"Remove seller from publisher","signature":"removeSeller(bytes32)","signatureHash":"fa837bb8"},{"inputs":[],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"name":"publisherDomain","type":"bytes32"},{"indexed":true,"name":"publisherKey","type":"address"}],"name":"_PublisherRegistered","type":"event","signature":"_PublisherRegistered(bytes32,address)","signatureHash":"e931c010"},{"anonymous":false,"inputs":[{"indexed":true,"name":"publisherDomain","type":"bytes32"},{"indexed":true,"name":"publisherKey","type":"address"}],"name":"_PublisherDeregistered","type":"event","signature":"_PublisherDeregistered(bytes32,address)","signatureHash":"f989fc40"},{"anonymous":false,"inputs":[{"indexed":true,"name":"publisherDomain","type":"bytes32"},{"indexed":true,"name":"sellerHash","type":"bytes32"}],"name":"_SellerAdded","type":"event","signature":"_SellerAdded(bytes32,bytes32)","signatureHash":"22228fd8"},{"anonymous":false,"inputs":[{"indexed":true,"name":"publisherDomain","type":"bytes32"},{"indexed":true,"name":"sellerHash","type":"bytes32"}],"name":"_SellerRemoved","type":"event","signature":"_SellerRemoved(bytes32,bytes32)","signatureHash":"322619e9"}]}
